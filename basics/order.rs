// hello-solana:
// 开始于最基础的例子，它通常演示如何编写一个简单的程序，接收一个指令并打印一个“Hello, Solana!”消息到链上的日志。这有助于理解Solana智能合约的基本结构和工作流程。

// transfer-sol:
// 学习如何在账户间转移SOL，这是区块链上最基础的操作之一。理解这个例子有助于学习账户管理和交易的创建。

// account-data:
// 深入学习账户的数据结构和如何在账户之间存储和操作数据。

// checking-accounts:
// 了解如何检查账户状态，包括余额和所有权等信息。

// create-account:
// 学习如何创建一个新的Solana账户，这是理解Solana账户模型的基础。

// close-account:
// 学习如何关闭一个账户并回收其余额，理解账户的生命周期。

// counter:
// 实现一个简单的计数器合约，这有助于理解状态的持久化和智能合约的状态管理。

// rent:
// 学习关于账户租金的概念，理解如何处理账户的租金免除状态。

// pda-rent-payer:
// 深入学习程序派生地址（PDA）以及如何用它来支付租金。

// realloc:
// 学习如何重新分配账户空间，这对于管理复杂合约状态非常重要。

// program-derived-addresses (PDA):
// 理解和使用PDA是Solana合约编程中的高级特性，对于权限和安全性至关重要。

// cross-program-invocation (CPI):
// 学习如何在一个合约中调用另一个合约的函数，这对于构建复杂应用程序和交互是必需的。

// repository-layout:
// 最后，理解如何组织和管理一个大型项目的代码库结构对于长期的维护和合作非常有用。
